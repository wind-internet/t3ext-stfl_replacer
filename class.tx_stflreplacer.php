<?php
/***************************************************************
*  Copyright notice
*
*  (c) 2005 Wolfgang Klinger (wolfgang@stufenlos.net)
*  All rights reserved
*
*  This script is part of the TYPO3 project. The TYPO3 project is
*  free software; you can redistribute it and/or modify
*  it under the terms of the GNU General Public License as published by
*  the Free Software Foundation; either version 2 of the License, or
*  (at your option) any later version.
*
*  The GNU General Public License can be found at
*  http://www.gnu.org/copyleft/gpl.html.
*
*  This script is distributed in the hope that it will be useful,
*  but WITHOUT ANY WARRANTY; without even the implied warranty of
*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
*  GNU General Public License for more details.
*
*  This copyright notice MUST APPEAR in all copies of the script!
***************************************************************/


/**
 * @author		Wolfgang Klinger <wolfgang@stufenlos.net>
 * @package 	TYPO3
 * @subpackage 	stfl_replacer
 */
class tx_stflreplacer {

	var $modifiers = 'imxseADSUXu';

	/**
	 * Replaces a string matching a pattern in the generated page content
	 * (e.g. single line comments generated by the auto parser)
	 *
	 * @param	array	array containing certain objects
	 * @param	object	tslib_fe object
	 * @return	void
	 */
	function replace(&$objArr, $tslib_fe) {
		// read rendered page

		$this->content = &$objArr['pObj']->content;

		// read configuration from PAGE TS

		$options = t3lib_BEFunc::getPagesTSconfig($objArr['pObj']->id);
		$properties = $options['options.']['stfl-replacer.'];

		// check if stfl-replacer is enabled for this page (tree)

		if ($options['options.']['stfl-replacer'] || $properties['enabled']) {
			$buffer = '';

			// read configuration from files

			if (isset($properties['configuration.']['files'])) {
				// read configuration data (xml)

				$files = explode(',', $properties['configuration.']['files']);

				$buffer = '';
				foreach ($files as $file) {

					// files must be relative to the current PATH_site

					$file = t3lib_div::getFileAbsFileName($file);

					if ($file && $handle = @fopen($file, 'r')) {
						while (!feof($handle)) {
							$buffer .= fgets($handle);
						}
					}
					fclose($handle);
				}
			}

			// read configuration from PAGE TS
			// the format will change in the future

			if (isset($properties['configuration.']['replace'])) {
				$buffer .= $properties['configuration.']['replace'];
			}

			// create an array out of the configuration

			if ($buffer != '') {
				$config_arr = t3lib_div::xml2array($buffer);
			}

			if (is_array($config_arr) && count($config_arr)) {

				// restrict substitutions to the <body> tag (will change in the future)

				$matches = array();
				preg_match('/<body.*?>(.+)<\/body>/is', $this->content, $matches);
				if (isset($matches[1])) {
					$work_on = $matches[1];
				}

				if ($work_on) {
					// set delimiter and global modifiers

					$delimiter = '/';
					if (isset($properties['delimiter']) && trim($properties['delimiter']) == 1) {
						$delimiter = trim($properties['delimiter']);
					}
					if (isset($properties['modifiers'])) {
						$matches = array();
						preg_match('/['.$this->modifiers.']+/', $properties['modifiers'], $matches);
						$modifiers = $matches[0];
					}

					// substitutions take effect in the order of their definition

					foreach ($config_arr as $config) {
						if (isset($config['pattern']) && isset($config['replacement'])) {
							// set modifier for this pattern (overwrite global modifiers)

							if (isset($config['modifiers'])) {
								$matches = array();
								preg_match('/['.$this->modifiers.']+/', $config['modifiers'], $matches);
								$modifiers = $matches[0];
							}

							// replace matching parts

							$pattern = $delimiter.$config['pattern'].$delimiter.$modifiers;
							$replacement = preg_replace("!" . '\x24' . "!" , '\\\$' , trim($config['replacement']));
							$work_on = preg_replace($pattern, $replacement, $work_on);
						}
					}

					// merge parts and set content
					$work_on = preg_replace("!" . '\x24' . "!" , '\\\$' , $work_on);
					$this->content = preg_replace('/(<body.*?>)(.+)(<\/body>)/is', '\\1'.$work_on.'\\3', $this->content);
				}
			}
		}
	}
}
?>
